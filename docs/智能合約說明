一、智能合約組成
        1. solidity 語言是目前 ETH smart contract 使用量最大宗的語言，這是一個類似 javascript 的語言。也有其他程式語言 ( vyper, python ) 的類別庫可以完成 smart contract 的撰寫，但是這裡我們先不討論。首先 solidity 的版本差異，在語法與編譯上會有所差異，因此 solidity 最開始必須要進行版本宣告。pragma solidity >=0.4.0 <0.7.0; (區間宣告) pragma solidity ^0.4.26; (單一宣告) 。接下來相關的語法內容會依照目前公司內部在測試的智能合約進行說明。
        2. ABI 是 smart contract 依據編譯後須執行的 function 使用 json 格式所產生的物件，全名為 Application Binary Interface ，與 API 的概念如出一轍。
       3. Bytecode 其實就是 binary code，只是轉換為 Hex 表示。這一串將會與接下來的佈署有關，後續將會有相關的說明。
       4. web3.js 是目前 ETH 相當活耀的 javascript 套件，在 MetaMask、MyEtherWallet、Remix 皆已經自己內部自含此套件，也有相當多的程式語言翻作，如: C#、Python、PHP。
二、智能合約佈署
        1. Remix 是 solidity 的 線上 IDE，同時還提供相當多的附屬功能及 console 的 web3.js 語法操作。最近 Layout 改版了，所以操作上還在熟悉中。
        2. EVM 全名是 Ethereum Virtual Machine，也就是以太的運行環境，source code 是在 go-ethereum 中。
        3. Mainnet,testnet(Rinkby,Ropsten....) 這些是以太的網路別，不同的網路彼此不能溝通，雖然地址相同，但是會無法運作或是沒有餘額。網路上有相當多的 faucet 所使用的網路多有所區別。
        4. 佈署智能合約需要花費 Gas，原因是一但成功佈署，大家都要耗費記憶體資源協助驗證、執行及儲存，因此 Gas 的多寡便是從你的合約執行所需耗費的資源進行計算。
        5. 可以使用 nodejs 的 solc 套件進行編譯。
三、智能合約交易
        1. 當智能合約透由交易完成佈署後，也會有一個屬於這個智能合約的地址，這個地址與一般地址一樣可以收錢，可以查餘額。特別的是合約內容的執行。一般的錢包地址是沒有合約佈署，能不能在已知的錢包地址佈署合約，目前沒有嘗試過，所以不知道。
        2. input 是智能合約用來判定執行合約動作及所需參數的一串 Hex 字串，此編碼可以透由 ABI 及 web3.js 的語法產出。
四、網路上的資源
        現在網路上的資源的解釋相當得多，因此這裡提供的大致上為官方正式文件及輔助工具，其中還有教學網站逐一步驟完成 smart contract 的遊戲過程。有興趣大家可以自行到相關連結實際操作或補充。
五、安全的詬病
        1. 角色及權限
            當我們開始要設計智能合約時，必須要注意的是合約的操作與執行。一但上了區塊鏈，原則上是公開的，所以在早期的智能合約最常出現的安全漏洞便是屬於這類所造成的。最好的設計是想清楚誰可以執行這個function，畢竟合約不會知道你是誰。
        2. 合約彼此之間是可以互相呼叫，這也意味著會有惡意合約針對你的合約進行攻擊。攻擊的意思不一定是癱瘓，而是在你不知情的情況將幣的交易改變，雖然區塊鏈上有紀錄，可是你大量的幣都被轉走也是無法追回，這也是曾經有過的案例。參照： https://kknews.cc/zh-tw/tech/4n8a54v.html
        3. 合約的更新
            合約成功佈署後無法像一般的軟體一樣進行更版，除非必要，不太建議寫設定值在合約裡。有關合約更新，建議的做法是使用擴充的設計進行更新。否則就只能銷毀後重新佈署一個新的合約。
六、結語
        經由初步的了解後，不難發現智能合約其實一點都不智能。若是針對既定的流程來說，是很方便，而且是屬於公開的資訊。但是合約的設計人員真的要很小心，Remix 有提供合約的逐步執行，可以提升執行效率及人為誤差。
